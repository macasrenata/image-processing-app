{"ast":null,"code":"var _jsxFileName = \"/home/macas/Documentos/Github/image-processing-app/frontend/src/app/App.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; // Importe o componente Routes\n// import ImageUpload from './components/ImageUpload';\n// import ImageList from './components/ImageList';\n// import OriginalImage from './components/OriginalImage';\n// import ProcessedImage from './components/ProcessedImage';\n// import OperationsList from './components/OperationsList';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <Router>\n//       <div className=\"App\">\n//         {/* Use o componente Routes */}\n//         <Routes>\n//           <Route path=\"/\" element={<ImageUpload />} /> {/* Use o atributo element */}\n//           <Route path=\"/images\" element={<ImageList />} />\n//           <Route path=\"/image/original/:id\" element={<OriginalImage />} />\n//           <Route path=\"/image/processed/:id\" element={<ProcessedImage />} />\n//           <Route path=\"/operations\" element={<OperationsList />} />\n//         </Routes>\n//       </div>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport ImageUpload from './components/ImageUpload';\nimport ProcessedImage from './components/ProcessedImage';\nimport OperationsList from './components/OperationsList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Estado para armazenar a imagem enviada e as operações realizadas\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [setAppliedOperations] = useState([]);\n\n  // Função para lidar com o upload da imagem\n  const handleImageUpload = data => {\n    setUploadedImage(data); // Define a imagem enviada\n    setAppliedOperations([]); // Limpa as operações aplicadas\n  };\n\n  // Função para lidar com as operações aplicadas na imagem\n  const handleOperationApply = operations => {\n    setAppliedOperations(operations); // Define as operações aplicadas\n  };\n\n  // Função para lidar com o salvamento da imagem\n  const handleImageSave = () => {\n    // Lógica para salvar a imagem no backend\n    console.log('Imagem salva com sucesso!');\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(ImageUpload, {\n              onImageUpload: handleImageUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this), uploadedImage && /*#__PURE__*/_jsxDEV(ProcessedImage, {\n              uploadedImage: uploadedImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 33\n            }, this), uploadedImage && /*#__PURE__*/_jsxDEV(OperationsList, {\n              onOperationApply: handleOperationApply,\n              onImageSave: handleImageSave\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"m4UNzJEMV6uqjcPAfxd59uIzrtk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","ImageUpload","ProcessedImage","OperationsList","jsxDEV","_jsxDEV","App","_s","uploadedImage","setUploadedImage","setAppliedOperations","handleImageUpload","data","handleOperationApply","operations","handleImageSave","console","log","children","className","path","element","onImageUpload","fileName","_jsxFileName","lineNumber","columnNumber","onOperationApply","onImageSave","_c","$RefreshReg$"],"sources":["/home/macas/Documentos/Github/image-processing-app/frontend/src/app/App.js"],"sourcesContent":["// import React from 'react';\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; // Importe o componente Routes\n// import ImageUpload from './components/ImageUpload';\n// import ImageList from './components/ImageList';\n// import OriginalImage from './components/OriginalImage';\n// import ProcessedImage from './components/ProcessedImage';\n// import OperationsList from './components/OperationsList';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <Router>\n//       <div className=\"App\">\n//         {/* Use o componente Routes */}\n//         <Routes>\n//           <Route path=\"/\" element={<ImageUpload />} /> {/* Use o atributo element */}\n//           <Route path=\"/images\" element={<ImageList />} />\n//           <Route path=\"/image/original/:id\" element={<OriginalImage />} />\n//           <Route path=\"/image/processed/:id\" element={<ProcessedImage />} />\n//           <Route path=\"/operations\" element={<OperationsList />} />\n//         </Routes>\n//       </div>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport ImageUpload from './components/ImageUpload';\nimport ProcessedImage from './components/ProcessedImage';\nimport OperationsList from './components/OperationsList';\nimport './App.css';\n\nfunction App() {\n  // Estado para armazenar a imagem enviada e as operações realizadas\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [setAppliedOperations] = useState([]);\n\n  // Função para lidar com o upload da imagem\n  const handleImageUpload = (data) => {\n    setUploadedImage(data); // Define a imagem enviada\n    setAppliedOperations([]); // Limpa as operações aplicadas\n  };\n\n  // Função para lidar com as operações aplicadas na imagem\n  const handleOperationApply = (operations) => {\n    setAppliedOperations(operations); // Define as operações aplicadas\n  };\n\n  // Função para lidar com o salvamento da imagem\n  const handleImageSave = () => {\n    // Lógica para salvar a imagem no backend\n    console.log('Imagem salva com sucesso!');\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          {/* Rota para a página principal, que inclui upload, imagem e operações */}\n          <Route path=\"/\" element={\n            <div>\n              {/* Componente ImageUpload para fazer o upload da imagem */}\n              <ImageUpload onImageUpload={handleImageUpload} />\n              \n              {/* Componente ProcessedImage para exibir a imagem processada */}\n              {uploadedImage && <ProcessedImage uploadedImage={uploadedImage} />}\n              \n              {/* Componente OperationsList para aplicar operações na imagem */}\n              {uploadedImage && (\n                <OperationsList\n                  onOperationApply={handleOperationApply}\n                  onImageSave={handleImageSave}\n                />\n              )}\n            </div>\n          } />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACc,oBAAoB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAE3C;EACA,MAAMe,iBAAiB,GAAIC,IAAI,IAAK;IAClCH,gBAAgB,CAACG,IAAI,CAAC,CAAC,CAAC;IACxBF,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMG,oBAAoB,GAAIC,UAAU,IAAK;IAC3CJ,oBAAoB,CAACI,UAAU,CAAC,CAAC,CAAC;EACpC,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACAC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EAC1C,CAAC;EAED,oBACEZ,OAAA,CAACP,MAAM;IAAAoB,QAAA,eACLb,OAAA;MAAKc,SAAS,EAAC,KAAK;MAAAD,QAAA,eAClBb,OAAA,CAACN,MAAM;QAAAmB,QAAA,eAELb,OAAA,CAACL,KAAK;UAACoB,IAAI,EAAC,GAAG;UAACC,OAAO,eACrBhB,OAAA;YAAAa,QAAA,gBAEEb,OAAA,CAACJ,WAAW;cAACqB,aAAa,EAAEX;YAAkB;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EAGhDlB,aAAa,iBAAIH,OAAA,CAACH,cAAc;cAACM,aAAa,EAAEA;YAAc;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EAGjElB,aAAa,iBACZH,OAAA,CAACF,cAAc;cACbwB,gBAAgB,EAAEd,oBAAqB;cACvCe,WAAW,EAAEb;YAAgB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9B,CACF;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE;QACN;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAACnB,EAAA,CAhDQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}